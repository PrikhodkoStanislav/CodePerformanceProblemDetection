"'/*\n *  Copyright 2017 Google Inc.\n *\n *  Licensed under the Apache License, Version 2.0 (the ""License"");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an ""AS IS"" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */'" '\n\n' 'package' "' '" 'com' '.' 'ground0' '.' 'transaction' '.' 'core' '.' 'livedata' '\n\n' 'import' "' '" 'android' '.' 'arch' '.' 'lifecycle' '.' 'LifecycleOwner' '\n' 'import' "' '" 'android' '.' 'arch' '.' 'lifecycle' '.' 'MutableLiveData' '\n' 'import' "' '" 'android' '.' 'arch' '.' 'lifecycle' '.' 'Observer' '\n' 'import' "' '" 'android' '.' 'support' '.' 'annotation' '.' 'MainThread' '\n' 'import' "' '" 'android' '.' 'util' '.' 'Log' '\n' 'import' "' '" 'java' '.' 'util' '.' 'concurrent' '.' 'atomic' '.' 'AtomicBoolean' '\n\n' "'/**\n * A lifecycle-aware observable that sends only new updates after subscription, used for events like\n * navigation and Snackbar messages.\n *\n *\n * This avoids a common problem with events: on configuration change (like rotation) an update\n * can be emitted if the observer is active. This LiveData only calls the observable if there's an\n * explicit call to setValue() or call().\n *\n *\n * Note that only one observer is going to be notified of changes.\n */'" '\n' 'class' "' '" 'SingleLiveEvent' '<' 'T' '>' "' '" ':' "' '" 'MutableLiveData' '<' 'T' '>' '(' ')' "' '" '{' "'\n\n  '" 'private' "' '" 'val' "' '" 'mPending' "' '" '=' "' '" 'AtomicBoolean' '(' 'false' ')' "'\n\n  '" '@' 'MainThread' "'\n  '" 'override' "' '" 'fun' "' '" 'observe' '(' "'\n    '" 'owner' ':' "' '" 'LifecycleOwner' ',' "'\n    '" 'observer' ':' "' '" 'Observer' '<' 'T' '>' "'\n  '" ')' "' '" '{' "'\n\n    '" 'if' "' '" '(' 'hasActiveObservers' '(' ')' ')' "' '" '{' "'\n      '" 'Log' '.' 'w' '(' 'TAG' ',' "' '" "'""'" "'Multiple observers registered but only one will be notified of changes.'" "'""'" ')' "'\n    '" '}' "'\n\n    '" "'// Observe the internal MutableLiveData'" "'\n    '" 'super' '.' 'observe' '(' 'owner' ',' "' '" 'Observer' "' '" '{' "' '" 't' "' '" '->' "'\n      '" 'if' "' '" '(' 'mPending' '.' 'compareAndSet' '(' 'true' ',' "' '" 'false' ')' ')' "' '" '{' "'\n        '" 'observer' '.' 'onChanged' '(' 't' ')' "'\n      '" '}' "'\n    '" '}' ')' "'\n  '" '}' "'\n\n  '" '@' 'MainThread' "'\n  '" 'override' "' '" 'fun' "' '" 'setValue' '(' 't' ':' "' '" 'T' '?' ')' "' '" '{' "'\n    '" 'mPending' '.' 'set' '(' 'true' ')' "'\n    '" 'super' '.' 'setValue' '(' 't' ')' "'\n  '" '}' "'\n\n  '" "'/**\n   * Used for cases where T is Void, to make calls cleaner.\n   */'" "'\n  '" '@' 'MainThread' "'\n  '" 'fun' "' '" 'call' '(' ')' "' '" '{' "'\n    '" 'value' "' '" '=' "' '" 'null' "'\n  '" '}' "'\n\n  '" 'companion' "' '" 'object' "' '" '{' "'\n\n    '" 'private' "' '" 'val' "' '" 'TAG' "' '" '=' "' '" "'""'" 'SingleLiveEvent' "'""'" "'\n  '" '}' '\n' '}' '\n'

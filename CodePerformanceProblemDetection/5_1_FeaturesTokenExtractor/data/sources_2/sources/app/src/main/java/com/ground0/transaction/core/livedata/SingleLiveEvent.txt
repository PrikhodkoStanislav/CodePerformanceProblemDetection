BLOCK_COMMENT ('/*\n *  Copyright 2017 Google Inc.\n *\n *  Licensed under the Apache License, Version 2.0 (the "License");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an "AS IS" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */')
WHITE_SPACE ('\n\n')
package ('package')
WHITE_SPACE (' ')
IDENTIFIER ('com')
DOT ('.')
IDENTIFIER ('ground0')
DOT ('.')
IDENTIFIER ('transaction')
DOT ('.')
IDENTIFIER ('core')
DOT ('.')
IDENTIFIER ('livedata')
WHITE_SPACE ('\n\n')
IDENTIFIER ('import')
WHITE_SPACE (' ')
IDENTIFIER ('android')
DOT ('.')
IDENTIFIER ('arch')
DOT ('.')
IDENTIFIER ('lifecycle')
DOT ('.')
IDENTIFIER ('LifecycleOwner')
WHITE_SPACE ('\n')
IDENTIFIER ('import')
WHITE_SPACE (' ')
IDENTIFIER ('android')
DOT ('.')
IDENTIFIER ('arch')
DOT ('.')
IDENTIFIER ('lifecycle')
DOT ('.')
IDENTIFIER ('MutableLiveData')
WHITE_SPACE ('\n')
IDENTIFIER ('import')
WHITE_SPACE (' ')
IDENTIFIER ('android')
DOT ('.')
IDENTIFIER ('arch')
DOT ('.')
IDENTIFIER ('lifecycle')
DOT ('.')
IDENTIFIER ('Observer')
WHITE_SPACE ('\n')
IDENTIFIER ('import')
WHITE_SPACE (' ')
IDENTIFIER ('android')
DOT ('.')
IDENTIFIER ('support')
DOT ('.')
IDENTIFIER ('annotation')
DOT ('.')
IDENTIFIER ('MainThread')
WHITE_SPACE ('\n')
IDENTIFIER ('import')
WHITE_SPACE (' ')
IDENTIFIER ('android')
DOT ('.')
IDENTIFIER ('util')
DOT ('.')
IDENTIFIER ('Log')
WHITE_SPACE ('\n')
IDENTIFIER ('import')
WHITE_SPACE (' ')
IDENTIFIER ('java')
DOT ('.')
IDENTIFIER ('util')
DOT ('.')
IDENTIFIER ('concurrent')
DOT ('.')
IDENTIFIER ('atomic')
DOT ('.')
IDENTIFIER ('AtomicBoolean')
WHITE_SPACE ('\n\n')
KDoc ('/**\n * A lifecycle-aware observable that sends only new updates after subscription, used for events like\n * navigation and Snackbar messages.\n *\n *\n * This avoids a common problem with events: on configuration change (like rotation) an update\n * can be emitted if the observer is active. This LiveData only calls the observable if there's an\n * explicit call to setValue() or call().\n *\n *\n * Note that only one observer is going to be notified of changes.\n */')
WHITE_SPACE ('\n')
class ('class')
WHITE_SPACE (' ')
IDENTIFIER ('SingleLiveEvent')
LT ('<')
IDENTIFIER ('T')
GT ('>')
WHITE_SPACE (' ')
COLON (':')
WHITE_SPACE (' ')
IDENTIFIER ('MutableLiveData')
LT ('<')
IDENTIFIER ('T')
GT ('>')
LPAR ('(')
RPAR (')')
WHITE_SPACE (' ')
LBRACE ('{')
WHITE_SPACE ('\n\n  ')
IDENTIFIER ('private')
WHITE_SPACE (' ')
val ('val')
WHITE_SPACE (' ')
IDENTIFIER ('mPending')
WHITE_SPACE (' ')
EQ ('=')
WHITE_SPACE (' ')
IDENTIFIER ('AtomicBoolean')
LPAR ('(')
false ('false')
RPAR (')')
WHITE_SPACE ('\n\n  ')
AT ('@')
IDENTIFIER ('MainThread')
WHITE_SPACE ('\n  ')
IDENTIFIER ('override')
WHITE_SPACE (' ')
fun ('fun')
WHITE_SPACE (' ')
IDENTIFIER ('observe')
LPAR ('(')
WHITE_SPACE ('\n    ')
IDENTIFIER ('owner')
COLON (':')
WHITE_SPACE (' ')
IDENTIFIER ('LifecycleOwner')
COMMA (',')
WHITE_SPACE ('\n    ')
IDENTIFIER ('observer')
COLON (':')
WHITE_SPACE (' ')
IDENTIFIER ('Observer')
LT ('<')
IDENTIFIER ('T')
GT ('>')
WHITE_SPACE ('\n  ')
RPAR (')')
WHITE_SPACE (' ')
LBRACE ('{')
WHITE_SPACE ('\n\n    ')
if ('if')
WHITE_SPACE (' ')
LPAR ('(')
IDENTIFIER ('hasActiveObservers')
LPAR ('(')
RPAR (')')
RPAR (')')
WHITE_SPACE (' ')
LBRACE ('{')
WHITE_SPACE ('\n      ')
IDENTIFIER ('Log')
DOT ('.')
IDENTIFIER ('w')
LPAR ('(')
IDENTIFIER ('TAG')
COMMA (',')
WHITE_SPACE (' ')
OPEN_QUOTE ('"')
REGULAR_STRING_PART ('Multiple observers registered but only one will be notified of changes.')
CLOSING_QUOTE ('"')
RPAR (')')
WHITE_SPACE ('\n    ')
RBRACE ('}')
WHITE_SPACE ('\n\n    ')
EOL_COMMENT ('// Observe the internal MutableLiveData')
WHITE_SPACE ('\n    ')
super ('super')
DOT ('.')
IDENTIFIER ('observe')
LPAR ('(')
IDENTIFIER ('owner')
COMMA (',')
WHITE_SPACE (' ')
IDENTIFIER ('Observer')
WHITE_SPACE (' ')
LBRACE ('{')
WHITE_SPACE (' ')
IDENTIFIER ('t')
WHITE_SPACE (' ')
ARROW ('->')
WHITE_SPACE ('\n      ')
if ('if')
WHITE_SPACE (' ')
LPAR ('(')
IDENTIFIER ('mPending')
DOT ('.')
IDENTIFIER ('compareAndSet')
LPAR ('(')
true ('true')
COMMA (',')
WHITE_SPACE (' ')
false ('false')
RPAR (')')
RPAR (')')
WHITE_SPACE (' ')
LBRACE ('{')
WHITE_SPACE ('\n        ')
IDENTIFIER ('observer')
DOT ('.')
IDENTIFIER ('onChanged')
LPAR ('(')
IDENTIFIER ('t')
RPAR (')')
WHITE_SPACE ('\n      ')
RBRACE ('}')
WHITE_SPACE ('\n    ')
RBRACE ('}')
RPAR (')')
WHITE_SPACE ('\n  ')
RBRACE ('}')
WHITE_SPACE ('\n\n  ')
AT ('@')
IDENTIFIER ('MainThread')
WHITE_SPACE ('\n  ')
IDENTIFIER ('override')
WHITE_SPACE (' ')
fun ('fun')
WHITE_SPACE (' ')
IDENTIFIER ('setValue')
LPAR ('(')
IDENTIFIER ('t')
COLON (':')
WHITE_SPACE (' ')
IDENTIFIER ('T')
QUEST ('?')
RPAR (')')
WHITE_SPACE (' ')
LBRACE ('{')
WHITE_SPACE ('\n    ')
IDENTIFIER ('mPending')
DOT ('.')
IDENTIFIER ('set')
LPAR ('(')
true ('true')
RPAR (')')
WHITE_SPACE ('\n    ')
super ('super')
DOT ('.')
IDENTIFIER ('setValue')
LPAR ('(')
IDENTIFIER ('t')
RPAR (')')
WHITE_SPACE ('\n  ')
RBRACE ('}')
WHITE_SPACE ('\n\n  ')
KDoc ('/**\n   * Used for cases where T is Void, to make calls cleaner.\n   */')
WHITE_SPACE ('\n  ')
AT ('@')
IDENTIFIER ('MainThread')
WHITE_SPACE ('\n  ')
fun ('fun')
WHITE_SPACE (' ')
IDENTIFIER ('call')
LPAR ('(')
RPAR (')')
WHITE_SPACE (' ')
LBRACE ('{')
WHITE_SPACE ('\n    ')
IDENTIFIER ('value')
WHITE_SPACE (' ')
EQ ('=')
WHITE_SPACE (' ')
null ('null')
WHITE_SPACE ('\n  ')
RBRACE ('}')
WHITE_SPACE ('\n\n  ')
IDENTIFIER ('companion')
WHITE_SPACE (' ')
object ('object')
WHITE_SPACE (' ')
LBRACE ('{')
WHITE_SPACE ('\n\n    ')
IDENTIFIER ('private')
WHITE_SPACE (' ')
val ('val')
WHITE_SPACE (' ')
IDENTIFIER ('TAG')
WHITE_SPACE (' ')
EQ ('=')
WHITE_SPACE (' ')
OPEN_QUOTE ('"')
REGULAR_STRING_PART ('SingleLiveEvent')
CLOSING_QUOTE ('"')
WHITE_SPACE ('\n  ')
RBRACE ('}')
WHITE_SPACE ('\n')
RBRACE ('}')
WHITE_SPACE ('\n')
